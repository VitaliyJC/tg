import { exec } from "child_process";
import { UserController, CodeController } from "../controllers/index.js";

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
export const connectedUsers = (bot) => {
  bot.command("connected_users", async (ctx) => {
    const args = ctx.message.text.split(" ").slice(1);
    const username = args[0];

    if (username) {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
      exec(`occtl --json show user ${username}`, (error, stdout, stderr) => {
        if (error || stderr) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error || stderr}`);
          ctx.reply(
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}.`
          );
          return;
        }

        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        const userInfo = JSON.parse(stdout);
        if (!userInfo || userInfo.length === 0) {
          ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.`);
          return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
        const user = userInfo[0];
        const {
          ID,
          Username,
          "Remote IP": remoteIP,
          IPv4,
          "User-Agent": userAgent,
          RX,
          TX,
          "Connected at": connectedAt,
          State,
          "_Connected at": connectedDuration,
        } = user;
        const message = `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${Username}:\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${State}\nID: ${ID}\nIP: ${remoteIP}\nVPN IP: ${IPv4}\nUser-Agent: ${userAgent}\n–ü–æ–ª—É—á–µ–Ω–æ: ${RX} –±–∞–π—Ç\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${TX} –±–∞–π—Ç\n–ü–æ–¥–∫–ª—é—á–µ–Ω —Å: ${connectedAt}\n–ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏: ${connectedDuration}`;
        ctx.reply(message);
      });
    } else {
      // –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
      exec("occtl --json show users", (error, stdout, stderr) => {
        if (error || stderr) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error || stderr}`);
          ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.");
          return;
        }

        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const users = JSON.parse(stdout);
        if (users.length === 0) {
          ctx.reply("üö∑ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.");
          return;
        }

        const userInfo = users
          .map((user) => {
            const {
              ID,
              Username,
              "Remote IP": remoteIP,
              IPv4,
              "User-Agent": userAgent,
              RX,
              TX,
              "Connected at": connectedAt,
              State,
            } = user;
            return `ID: ${ID}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${Username}\nIP: ${remoteIP}\nVPN IP: ${IPv4}\nUser-Agent: ${userAgent}\n–ü–æ–ª—É—á–µ–Ω–æ: ${RX} –±–∞–π—Ç\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${TX} –±–∞–π—Ç\n–ü–æ–¥–∫–ª—é—á–µ–Ω —Å: ${connectedAt}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${State}\n\n`;
          })
          .join("\n");

        ctx.reply(`–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n${userInfo}`);
      });
    }
  });
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
export const addCode = (bot) => {
  bot.command("add_code", async (ctx) => {
    const args = ctx.message.text.split(" ").slice(1);

    if (args.length < 2) {
      return ctx.reply(
        "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö.\n–ü—Ä–∏–º–µ—Ä: /addcode mycode 7"
      );
    }

    const code = args[0];
    const days = parseInt(args[1]);

    if (isNaN(days)) {
      return ctx.reply(
        "‚ùó–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —É–∫–∞–∑—ã–≤–∞—é—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."
      );
    }

    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + days);

    try {
      await CodeController.addCode(code, expiryDate);
      ctx.reply(
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: ${code}, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${days} –¥–Ω–µ–π (–¥–æ ${expiryDate.toDateString()})`
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞:", error);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞
export const listCode = (bot) => {
  bot.command("list_codes", async (ctx) => {
    try {
      const codes = await CodeController.getAllCodes();

      if (codes.length === 0) {
        return ctx.reply("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤.");
      }

      const checkStatus = (status) => {
        switch (status) {
          case "activated":
            return "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω üî¥";

          case "pending":
            return "–ê–∫—Ç–∏–≤–µ–Ω üü¢";

          case "expired":
            return "–ò—Å—Ç–µ–∫ üî¥";

          default:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚ùå";
        }
      };

      const codeList = codes
        .map((code) => {
          const status = checkStatus(code.status);
          return `–ö–æ–¥: ${code.code}, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(
            code.expiryDate
          ).toLocaleDateString("ru-RU")}, —Å—Ç–∞—Ç—É—Å: ${status}`;
        })
        .join("\n");

      ctx.reply(`–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞:\n${codeList}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞:", error);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞.");
    }
  });
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
export const deleteCode = (bot) => {
  bot.command("delete_code", async (ctx) => {
    const args = ctx.message.text.split(" ").slice(1);
    const code = args[0];

    if (!code) {
      return ctx.reply(
        "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n–ü—Ä–∏–º–µ—Ä: /deletecode mycode"
      );
    }

    try {
      const success = await CodeController.deleteCode(code);
      if (success) {
        ctx.reply(`‚úÖ –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ '${code}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
      } else {
        ctx.reply(`‚ùó–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ '${code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞:", error);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞
export const deleteAllCode = (bot) => {
  bot.command("delete_all_codes", async (ctx) => {
    try {
      const count = await CodeController.deleteAllCodes();
      ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞: ${count}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞:", error);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = (bot) => {
  bot.command("delete_user", async (ctx) => {
    const args = ctx.message.text.split(" ").slice(1);
    const username = args[0];

    if (!username) {
      return ctx.reply(
        "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /delete_user sever-test"
      );
    }

    try {
      const success = await UserController.deleteUser(username); // –í—ã–∑–æ–≤ deleteUser –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (!success) {
        ctx.reply(`‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã OpenConnect
      exec(
        `ocpasswd -d -c /etc/ocserv/clients/ocpasswd ${username}`,
        (error, stdout, stderr) => {
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
            ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}.`);
            return;
          }

          if (stderr) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: ${stderr}`);
            ctx.reply(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}: ${stderr}`
            );
            return;
          }

          ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        }
      );
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:",
        error
      );
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const listUser = (bot) => {
  bot.command("list_users", async (ctx) => {
    try {
      const users = await UserController.getAllUsers();

      if (users.length === 0) {
        ctx.reply("‚ùó–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
      } else {
        const userList = users
          .map(
            (user) => `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username} - ${user.status} üü¢`
          )
          .join("\n");
        ctx.reply(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n${userList}`);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    }
  });
};

export const showId = (bot) => {
  bot.command("id", async (ctx) => {
    await ctx.reply(`–í–∞—à telegram ID: ${ctx.from.id}`);
    console.log(ctx.from);
  });
};
